//===----------------------------------------------------------------------===//
//
// Part of the Utopia EDA Project, under the Apache License v2.0
// SPDX-License-Identifier: Apache-2.0
// Copyright 2021 ISP RAS (http://www.ispras.ru)
//
// This code is based on idct.c from mpeg2decode (build 960109),
// which carries the following copyright notice:
// Copyright (C) 1996, MPEG Software Simulation Group. All Rights Reserved.
//
//===----------------------------------------------------------------------===//

model IDCT {
  // Constants.
  nodetype C4    () => (INT16<1.0> value=4);
  nodetype C128  () => (INT16<1.0> value=128);
  nodetype C181  () => (INT16<1.0> value=181);
  nodetype C8192 () => (INT16<1.0> value=8192);

  nodetype W1 () => (INT16<1.0> value=2841); // 2048*sqrt(2)*cos(1*pi/16)
  nodetype W2 () => (INT16<1.0> value=2676); // 2048*sqrt(2)*cos(2*pi/16)
  nodetype W3 () => (INT16<1.0> value=2408); // 2048*sqrt(2)*cos(3*pi/16)
  nodetype W5 () => (INT16<1.0> value=1609); // 2048*sqrt(2)*cos(5*pi/16)
  nodetype W6 () => (INT16<1.0> value=1108); // 2048*sqrt(2)*cos(6*pi/16)
  nodetype W7 () => (INT16<1.0> value=565);  // 2048*sqrt(2)*cos(7*pi/16)

  nodetype W1_sub_W7 () => (INT16<1.0> value=2276);
  nodetype W1_add_W7 () => (INT16<1.0> value=3406);
  nodetype W3_sub_W5 () => (INT16<1.0> value=799);
  nodetype W3_add_W5 () => (INT16<1.0> value=4017);
  nodetype W2_sub_W6 () => (INT16<1.0> value=1568);
  nodetype W2_add_W6 () => (INT16<1.0> value=3784);

  // Inputs/Outputs.
  nodetype IN  () => (INT16<1.0> #0 x);
  nodetype OUT (INT16<1.0> x) => ();

  // Functional Units.
  nodetype ADD    (INT16<1.0> x, INT16<1.0> y) => (INT16<1.0> #1 z); // z = x + y
  nodetype SUB    (INT16<1.0> x, INT16<1.0> y) => (INT16<1.0> #1 z); // z = x - y
  nodetype MUL    (INT16<1.0> x, INT16<1.0> y) => (INT16<1.0> #1 z); // z = x * y
  nodetype SHL_8  (INT16<1.0> x)               => (INT16<1.0> #1 z); // z = x << 8
  nodetype SHL_11 (INT16<1.0> x)               => (INT16<1.0> #1 z); // z = x << 11
  nodetype SHR_3  (INT16<1.0> x)               => (INT16<1.0> #1 z); // z = x >> 3
  nodetype SHR_8  (INT16<1.0> x)               => (INT16<1.0> #1 z); // z = x >> 8
  nodetype SHR_14 (INT16<1.0> x)               => (INT16<1.0> #1 z); // z = x >> 14
  nodetype CLIP   (INT16<1.0> x)               => (INT16<1.0> #1 z); // z = x < -256 ? -256 : (x > 255 ? 255 : x)

  // Special Units.
  nodetype DUP_2 (INT16<1.0> x) => (INT16<1.0> y, INT16<1.0> z);

  /* row (horizontal) IDCT
   *
   *           7                       pi         1
   * dst[k] = sum c[l] * src[l] * cos( -- * ( k + - ) * l )
   *          l=0                      8          2
   *
   * where: c[0]    = 128
   *        c[1..7] = 128*sqrt(2)
   */
  graph IDCT_row {
    chan INT16 in_0;
    chan INT16 in_4;
    chan INT16 c128_0;
    chan INT16 c128_1;
    chan INT16 c128_2;
    chan INT16 c181_0;
    chan INT16 c181_1;
    chan INT16 w3;
    chan INT16 w6;
    chan INT16 w7;
    chan INT16 w1_sub_w7;
    chan INT16 w1_add_w7;
    chan INT16 w3_sub_w5;
    chan INT16 w3_add_w5;
    chan INT16 w2_sub_w6;
    chan INT16 w2_add_w6;
    chan INT16 t0_0;
    chan INT16 x0_0;
    chan INT16 x0_0_0;
    chan INT16 x0_0_1;
    chan INT16 x0_1;
    chan INT16 x0_2;
    chan INT16 x1_0;
    chan INT16 x1_0_0;
    chan INT16 x1_0_1;
    chan INT16 t1_1;
    chan INT16 x1_1;
    chan INT16 x1_1_0;
    chan INT16 x1_1_1;
    chan INT16 x1_2;
    chan INT16 x2_0;
    chan INT16 x2_0_0;
    chan INT16 x2_0_1;
    chan INT16 t2_1;
    chan INT16 x2_1;
    chan INT16 u2_2;
    chan INT16 v2_2;
    chan INT16 w2_2;
    chan INT16 x2_2;
    chan INT16 x3_0;
    chan INT16 x3_0_0;
    chan INT16 x3_0_1;
    chan INT16 t3_1;
    chan INT16 x3_1;
    chan INT16 x3_2;
    chan INT16 x4_0;
    chan INT16 x4_0_0;
    chan INT16 x4_0_1;
    chan INT16 t4_1;
    chan INT16 x4_1;
    chan INT16 x4_1_0;
    chan INT16 x4_1_1;
    chan INT16 x4_2;
    chan INT16 u4_3;
    chan INT16 v4_3;
    chan INT16 w4_3;
    chan INT16 x4_3;
    chan INT16 t5_1;
    chan INT16 x5_0;
    chan INT16 x5_0_0;
    chan INT16 x5_0_1;
    chan INT16 x5_1;
    chan INT16 x5_1_0;
    chan INT16 x5_1_1;
    chan INT16 x5_2;
    chan INT16 x6_0;
    chan INT16 x6_0_0;
    chan INT16 x6_0_1;
    chan INT16 t6_1;
    chan INT16 x6_1;
    chan INT16 x6_1_0;
    chan INT16 x6_1_1;
    chan INT16 x6_2;
    chan INT16 x7_0;
    chan INT16 x7_0_0;
    chan INT16 x7_0_1;
    chan INT16 t7_1;
    chan INT16 x7_1;
    chan INT16 x7_1_0;
    chan INT16 x7_1_1;
    chan INT16 x7_2;
    chan INT16 t8_1;
    chan INT16 x8_1;
    chan INT16 x8_1_0;
    chan INT16 x8_1_1;
    chan INT16 t8_2;
    chan INT16 x8_2;
    chan INT16 x8_2_0;
    chan INT16 x8_2_1;
    chan INT16 x8_3;
    chan INT16 x8_3_0;
    chan INT16 x8_3_1;
    chan INT16 x8_4;
    chan INT16 tmp_0;
    chan INT16 tmp_1;
    chan INT16 tmp_2;
    chan INT16 tmp_3;
    chan INT16 tmp_4;
    chan INT16 tmp_5;
    chan INT16 tmp_6;
    chan INT16 tmp_7;
    chan INT16 out_0;
    chan INT16 out_1;
    chan INT16 out_2;
    chan INT16 out_3;
    chan INT16 out_4;
    chan INT16 out_5;
    chan INT16 out_6;
    chan INT16 out_7;

    // Inputs.
    node IN n_in_0 () => (in_0); // blk[0]
    node IN n_in_1 () => (x4_0); // blk[1]
    node IN n_in_2 () => (x3_0); // blk[2]
    node IN n_in_3 () => (x7_0); // blk[3]
    node IN n_in_4 () => (in_4); // blk[4]
    node IN n_in_5 () => (x6_0); // blk[5]
    node IN n_in_6 () => (x2_0); // blk[6]
    node IN n_in_7 () => (x5_0); // blk[7]

    // Constants.
    node C128      n_c128_0    () => (c128_0);
    node C128      n_c128_1    () => (c128_1);
    node C128      n_c128_2    () => (c128_2);
    node C181      n_c181_0    () => (c181_0);
    node C181      n_c181_1    () => (c181_1);
    node W7        n_w7        () => (w7);
    node W1_sub_W7 n_w1_sub_w7 () => (w1_sub_w7);
    node W1_add_W7 n_w1_add_w7 () => (w1_add_w7);
    node W3        n_w3        () => (w3);
    node W3_sub_W5 n_w3_sub_w5 () => (w3_sub_w5);
    node W3_add_W5 n_w3_add_w5 () => (w3_add_w5);
    node W6        n_w6        () => (w6);
    node W2_sub_W6 n_w2_sub_w6 () => (w2_sub_w6);
    node W2_add_W6 n_w2_add_w6 () => (w2_add_w6);

    node SHL_11 n_x1_0 (in_4)         => (x1_0);
    // For proper rounding in the fourth stage.
    node SHL_11 n_t0_0 (in_0)         => (t0_0);
    node ADD    n_x0_0 (t0_0, c128_0) => (x0_0);

    node DUP_2 d_x0_0 (x0_0) => (x0_0_0, x0_0_1);
    node DUP_2 d_x1_0 (x1_0) => (x1_0_0, x1_0_1);
    node DUP_2 d_x2_0 (x2_0) => (x2_0_0, x2_0_1);
    node DUP_2 d_x3_0 (x3_0) => (x3_0_0, x3_0_1);
    node DUP_2 d_x4_0 (x4_0) => (x4_0_0, x4_0_1);
    node DUP_2 d_x5_0 (x5_0) => (x5_0_0, x5_0_1);
    node DUP_2 d_x6_0 (x6_0) => (x6_0_0, x6_0_1);
    node DUP_2 d_x7_0 (x7_0) => (x7_0_0, x7_0_1);

    // First stage.
    node ADD   n_t8_1 (x4_0_0,    x5_0_0) => (t8_1);
    node MUL   n_x8_1 (w7,        t8_1)   => (x8_1);
    node DUP_2 d_x8_1 (x8_1)              => (x8_1_0, x8_1_1);
    node MUL   n_t4_1 (w1_sub_w7, x4_0_1) => (t4_1);
    node ADD   n_x4_1 (x8_1_0,    t4_1)   => (x4_1);
    node DUP_2 d_x4_1 (x4_1)              => (x4_1_0, x4_1_1);
    node MUL   n_t5_1 (w1_add_w7, x5_0_1) => (t5_1);
    node SUB   n_x5_1 (x8_1_1,    t5_1)   => (x5_1);
    node DUP_2 d_x5_1 (x5_1)              => (x5_1_0, x5_1_1);
    node ADD   n_t8_2 (x6_0_0,    x7_0_0) => (t8_2);
    node MUL   n_x8_2 (w3,        t8_2)   => (x8_2);
    node DUP_2 d_x8_2 (x8_2)              => (x8_2_0, x8_2_1);
    node MUL   n_t6_1 (w3_sub_w5, x6_0_1) => (t6_1);
    node SUB   n_x6_1 (x8_2_0,    t6_1)   => (x6_1);
    node DUP_2 d_x6_1 (x6_1)              => (x6_1_0, x6_1_1);
    node MUL   n_t7_1 (w3_add_w5, x7_0_1) => (t7_1);
    node SUB   n_x7_1 (x8_2_1,    t7_1)   => (x7_1);
    node DUP_2 d_x7_1 (x7_1)              => (x7_1_0, x7_1_1);

    // Second stage.
    node ADD   n_x8_3 (x0_0_0,    x1_0_0) => (x8_3);
    node DUP_2 d_x8_3 (x8_3)              => (x8_3_0, x8_3_1);
    node SUB   n_x0_1 (x0_0_1,    x1_0_1) => (x0_1);
    node ADD   n_t1_1 (x3_0_0,    x2_0_0) => (t1_1);
    node MUL   n_x1_1 (w6,        t1_1)   => (x1_1);
    node DUP_2 d_x1_1 (x1_1)              => (x1_1_0, x1_1_1);
    node MUL   n_t2_1 (w2_add_w6, x2_0_1) => (t2_1);
    node SUB   n_x2_1 (x1_1_0,    t2_1)   => (x2_1);
    node MUL   n_t3_1 (w2_sub_w6, x3_0_1) => (t3_1);
    node ADD   n_x3_1 (x1_1_1,    t3_1)   => (x3_1);
    node ADD   n_x1_2 (x4_1_0,    x6_1_0) => (x1_2);
    node SUB   n_x4_2 (x4_1_1,    x6_1_1) => (x4_2);
    node ADD   n_x6_2 (x5_1_0,    x7_1_0) => (x6_2);
    node SUB   n_x5_2 (x5_1_1,    x7_1_1) => (x5_2);

    // Third stage.
    node ADD   n_x7_2 (x8_3_0, x3_1)   => (x7_2);
    node SUB   n_x8_4 (x8_3_1, x3_1)   => (x8_4);
    node ADD   n_x3_2 (x0_1,   x2_1)   => (x3_2);
    node SUB   n_x0_2 (x0_1,   x2_1)   => (x0_2);
    node ADD   n_u2_2 (x4_2,   x5_2)   => (u2_2);
    node MUL   n_v2_2 (c181_0, u2_2)   => (v2_2);
    node ADD   n_w2_2 (v2_2,   c128_1) => (w2_2);
    node SHR_8 n_x2_2 (w2_2)           => (x2_2);
    node SUB   n_u4_3 (x4_2,   x5_2)   => (u4_3);
    node MUL   n_v4_3 (c181_1, u4_3)   => (v4_3);
    node ADD   n_w4_3 (v4_3,   c128_2) => (w4_3);
    node SHR_8 n_x4_3 (w4_3)           => (x4_3);

    // Fourth stage.
    node ADD   n_tmp_0 (x7_2, x1_2) => (tmp_0);
    node SHR_8 n_shr_0 (tmp_0)      => (out_0);
    node ADD   n_tmp_1 (x3_2, x2_2) => (tmp_1);
    node SHR_8 n_shr_1 (tmp_1)      => (out_1);
    node ADD   n_tmp_2 (x0_2, x4_3) => (tmp_2);
    node SHR_8 n_shr_2 (tmp_2)      => (out_2);
    node ADD   n_tmp_3 (x8_4, x6_2) => (tmp_3);
    node SHR_8 n_shr_3 (tmp_3)      => (out_3);
    node SUB   n_tmp_4 (x8_4, x6_2) => (tmp_4);
    node SHR_8 n_shr_4 (tmp_4)      => (out_4);
    node SUB   n_tmp_5 (x0_2, x4_3) => (tmp_5);
    node SHR_8 n_shr_5 (tmp_5)      => (out_5);
    node SUB   n_tmp_6 (x3_2, x2_2) => (tmp_6);
    node SHR_8 n_shr_6 (tmp_6)      => (out_6);
    node SUB   n_tmp_7 (x7_2, x1_2) => (tmp_7);
    node SHR_8 n_shr_7 (tmp_7)      => (out_7);

    // Outputs.
    node OUT n_out_0 (out_0) => (); // blk[0]
    node OUT n_out_1 (out_1) => (); // blk[1]
    node OUT n_out_2 (out_2) => (); // blk[2]
    node OUT n_out_3 (out_3) => (); // blk[3]
    node OUT n_out_4 (out_4) => (); // blk[4]
    node OUT n_out_5 (out_5) => (); // blk[5]
    node OUT n_out_6 (out_6) => (); // blk[6]
    node OUT n_out_7 (out_7) => (); // blk[7]
  } // graph IDCT_row

  /* column (vertical) IDCT
   *
   *             7                         pi         1
   * dst[8*k] = sum c[l] * src[8*l] * cos( -- * ( k + - ) * l )
   *            l=0                        8          2
   *
   * where: c[0]    = 1/1024
   *        c[1..7] = (1/1024)*sqrt(2)
   */
  graph IDCT_col {
    chan INT16 c4_0;
    chan INT16 c4_1;
    chan INT16 c4_2;
    chan INT16 c128_0;
    chan INT16 c128_1;
    chan INT16 c181_0;
    chan INT16 c181_1;
    chan INT16 c8192;
    chan INT16 w3;
    chan INT16 w6;
    chan INT16 w7;
    chan INT16 w1_sub_w7;
    chan INT16 w1_add_w7;
    chan INT16 w3_sub_w5;
    chan INT16 w3_add_w5;
    chan INT16 w2_sub_w6;
    chan INT16 w2_add_w6;
    chan INT16 t0_0;
    chan INT16 x0_0;
    chan INT16 x0_1;
    chan INT16 x0_2;
    chan INT16 x1_0;
    chan INT16 u1_1;
    chan INT16 v1_1;
    chan INT16 x1_1;
    chan INT16 x1_2;
    chan INT16 u2_1;
    chan INT16 v2_1;
    chan INT16 x2_1;
    chan INT16 u2_2;
    chan INT16 v2_2;
    chan INT16 w2_2;
    chan INT16 x2_2;
    chan INT16 u3_1;
    chan INT16 v3_1;
    chan INT16 x3_1;
    chan INT16 x3_2;
    chan INT16 u4_1;
    chan INT16 v4_1;
    chan INT16 x4_1;
    chan INT16 x4_2;
    chan INT16 u4_3;
    chan INT16 v4_3;
    chan INT16 w4_3;
    chan INT16 x4_3;
    chan INT16 u5_1;
    chan INT16 v5_1;
    chan INT16 x5_1;
    chan INT16 x5_2;
    chan INT16 u6_1;
    chan INT16 v6_1;
    chan INT16 x6_1;
    chan INT16 x6_2;
    chan INT16 u7_1;
    chan INT16 v7_1;
    chan INT16 x7_1;
    chan INT16 x7_2;
    chan INT16 u8_0;
    chan INT16 v8_0;
    chan INT16 x8_0;
    chan INT16 u8_1;
    chan INT16 v8_1;
    chan INT16 x8_1;
    chan INT16 x8_2;
    chan INT16 x8_3;
    chan INT16 tmp_0;
    chan INT16 tmp_1;
    chan INT16 tmp_2;
    chan INT16 tmp_3;
    chan INT16 tmp_4;
    chan INT16 tmp_5;
    chan INT16 tmp_6;
    chan INT16 tmp_7;
    chan INT16 val_0;
    chan INT16 val_1;
    chan INT16 val_2;
    chan INT16 val_3;
    chan INT16 val_4;
    chan INT16 val_5;
    chan INT16 val_6;
    chan INT16 val_7;
    chan INT16 out_0;
    chan INT16 out_1;
    chan INT16 out_2;
    chan INT16 out_3;
    chan INT16 out_4;
    chan INT16 out_5;
    chan INT16 out_6;
    chan INT16 out_7;

    // Inputs.
    node IN n_in_0 () => (in_0); // blk[8*0]
    node IN n_in_1 () => (x4_0); // blk[8*1]
    node IN n_in_2 () => (x3_0); // blk[8*2]
    node IN n_in_3 () => (x7_0); // blk[8*3]
    node IN n_in_4 () => (in_4); // blk[8*4]
    node IN n_in_5 () => (x6_0); // blk[8*5]
    node IN n_in_6 () => (x2_0); // blk[8*6]
    node IN n_in_7 () => (x5_0); // blk[8*7]

    // Constants.
    node C4        n_c4_0      () => (c4_0);
    node C4        n_c4_1      () => (c4_1);
    node C4        n_c4_2      () => (c4_2);
    node C128      n_c128_0    () => (c128_0);
    node C128      n_c128_1    () => (c128_1);
    node C181      n_c181_0    () => (c181_0);
    node C181      n_c181_1    () => (c181_1);
    node C8192     n_c8192     () => (c8192);
    node W7        n_w7        () => (w7);
    node W1_sub_W7 n_w1_sub_w7 () => (w1_sub_w7);
    node W1_add_W7 n_w1_add_w7 () => (w1_add_w7);
    node W3        n_w3        () => (w3);
    node W3_sub_W5 n_w3_sub_w5 () => (w3_sub_w5);
    node W3_add_W5 n_w3_add_w5 () => (w3_add_w5);
    node W6        n_w6        () => (w6);
    node W2_sub_W6 n_w2_sub_w6 () => (w2_sub_w6);
    node W2_add_W6 n_w2_add_w6 () => (w2_add_w6);

    node SHL_8 n_x1_0 (in_4)        => (x1_0);
    node SHL_8 n_t0_0 (in_0)        => (t0_0);
    node ADD   n_x0_0 (t0_0, c8192) => (x0_0);

    // First stage.
    node ADD   n_u8_0 (x4_0,      x5_0) => (u8_0);
    node MUL   n_v8_0 (w7,        u8_0) => (v8_0);
    node ADD   n_x8_0 (v8_0,      c4_0) => (x8_0);
    node MUL   n_u4_1 (w1_sub_w7, x4_0) => (u4_1);
    node ADD   n_v4_1 (x8_0,      u4_1) => (v4_1);
    node SHR_3 n_x4_1 (v4_1)            => (x4_1);
    node MUL   n_u5_1 (w1_add_w7, x5_0) => (u5_1);
    node SUB   n_v5_1 (x8_0,      u5_1) => (v5_1);
    node SHR_3 n_x5_1 (v5_1)            => (x5_1);
    node ADD   n_u8_1 (x6_0,      x7_0) => (u8_1);
    node MUL   n_v8_1 (w3,        u8_1) => (v8_1);
    node ADD   n_x8_1 (v8_1,      c4_1) => (x8_1);
    node MUL   n_u6_1 (w3_sub_w5, x6_0) => (u6_1);
    node SUB   n_v6_1 (x8_1,      u6_1) => (v6_1);
    node SHR_3 n_x6_1 (v6_1)            => (x6_1);
    node MUL   n_u7_1 (w3_add_w5, x7_0) => (u7_1);
    node SUB   n_v7_1 (x8_1,      u7_1) => (v7_1);
    node SHR_3 n_x7_1 (v7_1)            => (x7_1);

    // Second stage.
    node ADD   n_x8_2 (x0_0,      x1_0) => (x8_2);
    node SUB   n_x0_1 (x0_0,      x1_0) => (x0_1);
    node ADD   n_u1_1 (x3_0,      x2_0) => (u1_1);
    node MUL   n_v1_1 (w6,        u1_1) => (v1_1);
    node ADD   n_x1_1 (v1_1,      c4_2) => (x1_1);
    node MUL   n_u2_1 (w2_add_w6, x2_0) => (u2_1);
    node SUB   n_v2_1 (x1_1,      u2_1) => (v2_1);
    node SHR_3 n_x2_1 (v2_1)            => (x2_1);
    node MUL   n_u3_1 (w2_sub_w6, x3_0) => (u3_1);
    node ADD   n_v3_1 (x1_1,      u3_1) => (v3_1);
    node SHR_3 n_x3_1 (v3_1)            => (x3_1);
    node ADD   n_x1_2 (x4_1,      x6_1) => (x1_2);
    node SUB   n_x4_2 (x4_1,      x6_1) => (x4_2);
    node ADD   n_x6_2 (x5_1,      x7_1) => (x6_2);
    node SUB   n_x5_2 (x5_1,      x7_1) => (x5_2);

    // Third stage.
    node ADD   n_x7_2 (x8_2,   x3_1)   => (x7_2);
    node SUB   n_x8_3 (x8_2,   x3_1)   => (x8_3);
    node ADD   n_x3_2 (x0_1,   x2_1)   => (x3_2);
    node SUB   n_x0_2 (x0_1,   x2_1)   => (x0_2);
    node ADD   n_u2_2 (x4_2,   x5_2)   => (u2_2);
    node MUL   n_v2_2 (c181_0, u2_2)   => (v2_2);
    node ADD   n_w2_2 (v2_2,   c128_0) => (w2_2);
    node SHR_8 n_x2_2 (w2_2)           => (x2_2);
    node SUB   n_u4_3 (x4_2,   x5_2)   => (u4_3);
    node MUL   n_v4_3 (c181_1, u4_3)   => (v4_3);
    node ADD   n_w4_3 (v4_3,   c128_1) => (w4_3);
    node SHR_8 n_x4_3 (w4_3)           => (x4_3);

    // Fourth stage.
    node ADD    n_tmp_0 (x7_2, x1_2) => (tmp_0);
    node SHR_14 n_val_0 (val_0)      => (val_0);
    node CLIP   n_clp_0 (val_0)      => (out_0);
    node ADD    n_tmp_1 (x3_2, x2_2) => (tmp_1);
    node SHR_14 n_val_1 (val_1)      => (val_1);
    node CLIP   n_clp_1 (val_1)      => (out_1);
    node ADD    n_tmp_2 (x0_2, x4_3) => (tmp_2);
    node SHR_14 n_val_2 (val_2)      => (val_2);
    node CLIP   n_clp_2 (val_2)      => (out_2);
    node ADD    n_tmp_3 (x8_3, x6_2) => (tmp_3);
    node SHR_14 n_val_3 (val_3)      => (val_3);
    node CLIP   n_clp_3 (val_3)      => (out_3);
    node SUB    n_tmp_4 (x8_3, x6_2) => (tmp_4);
    node SHR_14 n_val_4 (val_4)      => (val_4);
    node CLIP   n_clp_4 (val_4)      => (out_4);
    node SUB    n_tmp_5 (x0_2, x4_3) => (tmp_5);
    node SHR_14 n_val_5 (val_5)      => (val_5);
    node CLIP   n_clp_5 (val_5)      => (out_5);
    node SUB    n_tmp_6 (x3_2, x2_2) => (tmp_6);
    node SHR_14 n_val_6 (val_6)      => (val_6);
    node CLIP   n_clp_6 (val_6)      => (out_6);
    node SUB    n_tmp_7 (x7_2, x1_2) => (tmp_7);
    node SHR_14 n_val_7 (val_7)      => (val_7);
    node CLIP   n_clp_7 (val_7)      => (out_7);

    // Outputs.
    node OUT n_out_0 (out_0) => (); // blk[8*0]
    node OUT n_out_1 (out_1) => (); // blk[8*1]
    node OUT n_out_2 (out_2) => (); // blk[8*2]
    node OUT n_out_3 (out_3) => (); // blk[8*3]
    node OUT n_out_4 (out_4) => (); // blk[8*4]
    node OUT n_out_5 (out_5) => (); // blk[8*5]
    node OUT n_out_6 (out_6) => (); // blk[8*6]
    node OUT n_out_7 (out_7) => (); // blk[8*7]
  } // graph IDCT_col
} // model IDCT
