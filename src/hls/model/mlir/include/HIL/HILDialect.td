//===- HILDialect.td - HIL dialect -----------*- tablegen -*-===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef STANDALONE_DIALECT
#define STANDALONE_DIALECT

include "mlir/IR/OpBase.td"

//===----------------------------------------------------------------------===//
// HIL dialect definition.
//===----------------------------------------------------------------------===//

def HIL_Dialect : Dialect {
    let name = "eda";
    let summary = "A hil out-of-tree MLIR dialect.";
    let description = [{
        This dialect is an example of an out-of-tree MLIR dialect designed to
        illustrate the basic setup required to develop MLIR-based tools without
        working inside of the LLVM source tree.
    }];
    let cppNamespace = "::mlir::hil";
}

//===----------------------------------------------------------------------===//
// Base hil operation definition.
//===----------------------------------------------------------------------===//

class HIL_Op<string mnemonic, list<OpTrait> traits = []> :
        Op<HIL_Dialect, mnemonic, traits>;

/* class HIL_Type<Pred condition, string descr=""> : */
/*         DialectType<HIL_Dialect, condition, descr>; */
class HIL_Type<string name> : TypeDef<HIL_Dialect, name> { }

#endif // STANDALONE_DIALECT
