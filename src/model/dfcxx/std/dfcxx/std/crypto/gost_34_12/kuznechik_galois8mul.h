//===----------------------------------------------------------------------===//
//
// Part of the Utopia HLS Project, under the Apache License v2.0
// SPDX-License-Identifier: Apache-2.0
// Copyright 2025 ISP RAS (http://www.ispras.ru)
//
//===----------------------------------------------------------------------===//

#include "dfcxx/DFCXX.h"

#include <cassert>

namespace dfcxx::std {

class KuznechikGalois8Mul : public dfcxx::Kernel {
public:
  std::string_view getName() const override {
    return "KuznechikGalois8Mul";
  }

  ~KuznechikGalois8Mul() override = default;

  using DFType = dfcxx::DFType;
  using DFVariable = dfcxx::DFVariable;

  KuznechikGalois8Mul(uint8_t constVal) : dfcxx::Kernel() {
    const DFType type = dfUInt(8);

    #define C(NUM) constant.var(type, uint64_t(NUM))
    DFVariable in = io.input("in", type);
    DFVariable out = io.output("out", type);
    DFVariable muxed;

    switch (constVal) {
      case 0x1: muxed = in; break;
      case 0x94: muxed = control.mux(in, {
        C(0), C(148), C(235), C(127), C(21), C(129), C(254), C(106), C(42),
        C(190), C(193), C(85), C(63), C(171), C(212), C(64), C(84), C(192),
        C(191), C(43), C(65), C(213), C(170), C(62), C(126), C(234), C(149),
        C(1), C(107), C(255), C(128), C(20), C(168), C(60), C(67), C(215),
        C(189), C(41), C(86), C(194), C(130), C(22), C(105), C(253), C(151),
        C(3), C(124), C(232), C(252), C(104), C(23), C(131), C(233), C(125),
        C(2), C(150), C(214), C(66), C(61), C(169), C(195), C(87), C(40),
        C(188), C(147), C(7), C(120), C(236), C(134), C(18), C(109), C(249),
        C(185), C(45), C(82), C(198), C(172), C(56), C(71), C(211), C(199),
        C(83), C(44), C(184), C(210), C(70), C(57), C(173), C(237), C(121),
        C(6), C(146), C(248), C(108), C(19), C(135), C(59), C(175), C(208),
        C(68), C(46), C(186), C(197), C(81), C(17), C(133), C(250), C(110),
        C(4), C(144), C(239), C(123), C(111), C(251), C(132), C(16), C(122),
        C(238), C(145), C(5), C(69), C(209), C(174), C(58), C(80), C(196),
        C(187), C(47), C(229), C(113), C(14), C(154), C(240), C(100), C(27),
        C(143), C(207), C(91), C(36), C(176), C(218), C(78), C(49), C(165),
        C(177), C(37), C(90), C(206), C(164), C(48), C(79), C(219), C(155),
        C(15), C(112), C(228), C(142), C(26), C(101), C(241), C(77), C(217),
        C(166), C(50), C(88), C(204), C(179), C(39), C(103), C(243), C(140),
        C(24), C(114), C(230), C(153), C(13), C(25), C(141), C(242), C(102),
        C(12), C(152), C(231), C(115), C(51), C(167), C(216), C(76), C(38),
        C(178), C(205), C(89), C(118), C(226), C(157), C(9), C(99), C(247),
        C(136), C(28), C(92), C(200), C(183), C(35), C(73), C(221), C(162),
        C(54), C(34), C(182), C(201), C(93), C(55), C(163), C(220), C(72),
        C(8), C(156), C(227), C(119), C(29), C(137), C(246), C(98), C(222),
        C(74), C(53), C(161), C(203), C(95), C(32), C(180), C(244), C(96),
        C(31), C(139), C(225), C(117), C(10), C(158), C(138), C(30), C(97),
        C(245), C(159), C(11), C(116), C(224), C(160), C(52), C(75), C(223),
        C(181), C(33), C(94), C(202)}); break;
      case 0x20: muxed = control.mux(in, {
        C(0), C(32), C(64), C(96), C(128), C(160), C(192), C(224), C(195),
        C(227), C(131), C(163), C(67), C(99), C(3), C(35), C(69), C(101),
        C(5), C(37), C(197), C(229), C(133), C(165), C(134), C(166), C(198),
        C(230), C(6), C(38), C(70), C(102), C(138), C(170), C(202), C(234),
        C(10), C(42), C(74), C(106), C(73), C(105), C(9), C(41), C(201),
        C(233), C(137), C(169), C(207), C(239), C(143), C(175), C(79),
        C(111), C(15), C(47), C(12), C(44), C(76), C(108), C(140), C(172),
        C(204), C(236), C(215), C(247), C(151), C(183), C(87), C(119), C(23),
        C(55), C(20), C(52), C(84), C(116), C(148), C(180), C(212), C(244),
        C(146), C(178), C(210), C(242), C(18), C(50), C(82), C(114), C(81),
        C(113), C(17), C(49), C(209), C(241), C(145), C(177), C(93), C(125),
        C(29), C(61), C(221), C(253), C(157), C(189), C(158), C(190), C(222),
        C(254), C(30), C(62), C(94), C(126), C(24), C(56), C(88), C(120),
        C(152), C(184), C(216), C(248), C(219), C(251), C(155), C(187),
        C(91), C(123), C(27), C(59), C(109), C(77), C(45), C(13), C(237),
        C(205), C(173), C(141), C(174), C(142), C(238), C(206), C(46), C(14),
        C(110), C(78), C(40), C(8), C(104), C(72), C(168), C(136), C(232),
        C(200), C(235), C(203), C(171), C(139), C(107), C(75), C(43), C(11),
        C(231), C(199), C(167), C(135), C(103), C(71), C(39), C(7), C(36),
        C(4), C(100), C(68), C(164), C(132), C(228), C(196), C(162), C(130),
        C(226), C(194), C(34), C(2), C(98), C(66), C(97), C(65), C(33), C(1),
        C(225), C(193), C(161), C(129), C(186), C(154), C(250), C(218), C(58),
        C(26), C(122), C(90), C(121), C(89), C(57), C(25), C(249), C(217),
        C(185), C(153), C(255), C(223), C(191), C(159), C(127), C(95), C(63),
        C(31), C(60), C(28), C(124), C(92), C(188), C(156), C(252), C(220),
        C(48), C(16), C(112), C(80), C(176), C(144), C(240), C(208), C(243),
        C(211), C(179), C(147), C(115), C(83), C(51), C(19), C(117), C(85),
        C(53), C(21), C(245), C(213), C(181), C(149), C(182), C(150), C(246),
        C(214), C(54), C(22), C(118), C(86)}); break;
      case 0x85: muxed = control.mux(in, {
        C(0), C(133), C(201), C(76), C(81), C(212), C(152), C(29), C(162),
        C(39), C(107), C(238), C(243), C(118), C(58), C(191), C(135), C(2),
        C(78), C(203), C(214), C(83), C(31), C(154), C(37), C(160), C(236),
        C(105), C(116), C(241), C(189), C(56), C(205), C(72), C(4), C(129),
        C(156), C(25), C(85), C(208), C(111), C(234), C(166), C(35), C(62),
        C(187), C(247), C(114), C(74), C(207), C(131), C(6), C(27), C(158),
        C(210), C(87), C(232), C(109), C(33), C(164), C(185), C(60), C(112),
        C(245), C(89), C(220), C(144), C(21), C(8), C(141), C(193), C(68),
        C(251), C(126), C(50), C(183), C(170), C(47), C(99), C(230), C(222),
        C(91), C(23), C(146), C(143), C(10), C(70), C(195), C(124), C(249),
        C(181), C(48), C(45), C(168), C(228), C(97), C(148), C(17), C(93),
        C(216), C(197), C(64), C(12), C(137), C(54), C(179), C(255), C(122),
        C(103), C(226), C(174), C(43), C(19), C(150), C(218), C(95), C(66),
        C(199), C(139), C(14), C(177), C(52), C(120), C(253), C(224), C(101),
        C(41), C(172), C(178), C(55), C(123), C(254), C(227), C(102), C(42),
        C(175), C(16), C(149), C(217), C(92), C(65), C(196), C(136), C(13),
        C(53), C(176), C(252), C(121), C(100), C(225), C(173), C(40), C(151),
        C(18), C(94), C(219), C(198), C(67), C(15), C(138), C(127), C(250),
        C(182), C(51), C(46), C(171), C(231), C(98), C(221), C(88), C(20),
        C(145), C(140), C(9), C(69), C(192), C(248), C(125), C(49), C(180),
        C(169), C(44), C(96), C(229), C(90), C(223), C(147), C(22), C(11),
        C(142), C(194), C(71), C(235), C(110), C(34), C(167), C(186), C(63),
        C(115), C(246), C(73), C(204), C(128), C(5), C(24), C(157), C(209),
        C(84), C(108), C(233), C(165), C(32), C(61), C(184), C(244), C(113),
        C(206), C(75), C(7), C(130), C(159), C(26), C(86), C(211), C(38),
        C(163), C(239), C(106), C(119), C(242), C(190), C(59), C(132), C(1),
        C(77), C(200), C(213), C(80), C(28), C(153), C(161), C(36), C(104),
        C(237), C(240), C(117), C(57), C(188), C(3), C(134), C(202), C(79),
        C(82), C(215), C(155), C(30)}); break;
      case 0x10: muxed = control.mux(in, {
        C(0), C(16), C(32), C(48), C(64), C(80), C(96), C(112), C(128),
        C(144), C(160), C(176), C(192), C(208), C(224), C(240), C(195),
        C(211), C(227), C(243), C(131), C(147), C(163), C(179), C(67),
        C(83), C(99), C(115), C(3), C(19), C(35), C(51), C(69), C(85),
        C(101), C(117), C(5), C(21), C(37), C(53), C(197), C(213),
        C(229), C(245), C(133), C(149), C(165), C(181), C(134), C(150),
        C(166), C(182), C(198), C(214), C(230), C(246), C(6), C(22),
        C(38), C(54), C(70), C(86), C(102), C(118), C(138), C(154),
        C(170), C(186), C(202), C(218), C(234), C(250), C(10), C(26),
        C(42), C(58), C(74), C(90), C(106), C(122), C(73), C(89), C(105),
        C(121), C(9), C(25), C(41), C(57), C(201), C(217), C(233), C(249),
        C(137), C(153), C(169), C(185), C(207), C(223), C(239), C(255),
        C(143), C(159), C(175), C(191), C(79), C(95), C(111), C(127),
        C(15), C(31), C(47), C(63), C(12), C(28), C(44), C(60), C(76),
        C(92), C(108), C(124), C(140), C(156), C(172), C(188), C(204),
        C(220), C(236), C(252), C(215), C(199), C(247), C(231), C(151),
        C(135), C(183), C(167), C(87), C(71), C(119), C(103), C(23),
        C(7), C(55), C(39), C(20), C(4), C(52), C(36), C(84), C(68),
        C(116), C(100), C(148), C(132), C(180), C(164), C(212), C(196),
        C(244), C(228), C(146), C(130), C(178), C(162), C(210), C(194),
        C(242), C(226), C(18), C(2), C(50), C(34), C(82), C(66), C(114),
        C(98), C(81), C(65), C(113), C(97), C(17), C(1), C(49), C(33),
        C(209), C(193), C(241), C(225), C(145), C(129), C(177), C(161),
        C(93), C(77), C(125), C(109), C(29), C(13), C(61), C(45), C(221),
        C(205), C(253), C(237), C(157), C(141), C(189), C(173), C(158),
        C(142), C(190), C(174), C(222), C(206), C(254), C(238), C(30),
        C(14), C(62), C(46), C(94), C(78), C(126), C(110), C(24), C(8),
        C(56), C(40), C(88), C(72), C(120), C(104), C(152), C(136), C(184),
        C(168), C(216), C(200), C(248), C(232), C(219), C(203), C(251),
        C(235), C(155), C(139), C(187), C(171), C(91), C(75), C(123),
        C(107), C(27), C(11), C(59), C(43)}); break;
      case 0xC2: muxed = control.mux(in, {
        C(0), C(194), C(71), C(133), C(142), C(76), C(201), C(11), C(223),
        C(29), C(152), C(90), C(81), C(147), C(22), C(212), C(125), C(191),
        C(58), C(248), C(243), C(49), C(180), C(118), C(162), C(96), C(229),
        C(39), C(44), C(238), C(107), C(169), C(250), C(56), C(189), C(127),
        C(116), C(182), C(51), C(241), C(37), C(231), C(98), C(160), C(171),
        C(105), C(236), C(46), C(135), C(69), C(192), C(2), C(9), C(203),
        C(78), C(140), C(88), C(154), C(31), C(221), C(214), C(20), C(145),
        C(83), C(55), C(245), C(112), C(178), C(185), C(123), C(254), C(60),
        C(232), C(42), C(175), C(109), C(102), C(164), C(33), C(227), C(74),
        C(136), C(13), C(207), C(196), C(6), C(131), C(65), C(149), C(87),
        C(210), C(16), C(27), C(217), C(92), C(158), C(205), C(15), C(138),
        C(72), C(67), C(129), C(4), C(198), C(18), C(208), C(85), C(151),
        C(156), C(94), C(219), C(25), C(176), C(114), C(247), C(53), C(62),
        C(252), C(121), C(187), C(111), C(173), C(40), C(234), C(225), C(35),
        C(166), C(100), C(110), C(172), C(41), C(235), C(224), C(34), C(167),
        C(101), C(177), C(115), C(246), C(52), C(63), C(253), C(120), C(186),
        C(19), C(209), C(84), C(150), C(157), C(95), C(218), C(24), C(204),
        C(14), C(139), C(73), C(66), C(128), C(5), C(199), C(148), C(86),
        C(211), C(17), C(26), C(216), C(93), C(159), C(75), C(137), C(12),
        C(206), C(197), C(7), C(130), C(64), C(233), C(43), C(174), C(108),
        C(103), C(165), C(32), C(226), C(54), C(244), C(113), C(179), C(184),
        C(122), C(255), C(61), C(89), C(155), C(30), C(220), C(215), C(21),
        C(144), C(82), C(134), C(68), C(193), C(3), C(8), C(202), C(79),
        C(141), C(36), C(230), C(99), C(161), C(170), C(104), C(237),
        C(47), C(251), C(57), C(188), C(126), C(117), C(183), C(50), C(240),
        C(163), C(97), C(228), C(38), C(45), C(239), C(106), C(168), C(124),
        C(190), C(59), C(249), C(242), C(48), C(181), C(119), C(222), C(28),
        C(153), C(91), C(80), C(146), C(23), C(213), C(1), C(195), C(70),
        C(132), C(143), C(77), C(200), C(10)}); break;
      case 0xC0: muxed = control.mux(in, {
        C(0), C(192), C(67), C(131), C(134), C(70), C(197), C(5), C(207),
        C(15), C(140), C(76), C(73), C(137), C(10), C(202), C(93), C(157),
        C(30), C(222), C(219), C(27), C(152), C(88), C(146), C(82), C(209),
        C(17), C(20), C(212), C(87), C(151), C(186), C(122), C(249), C(57),
        C(60), C(252), C(127), C(191), C(117), C(181), C(54), C(246), C(243),
        C(51), C(176), C(112), C(231), C(39), C(164), C(100), C(97), C(161),
        C(34), C(226), C(40), C(232), C(107), C(171), C(174), C(110), C(237),
        C(45), C(183), C(119), C(244), C(52), C(49), C(241), C(114), C(178),
        C(120), C(184), C(59), C(251), C(254), C(62), C(189), C(125), C(234),
        C(42), C(169), C(105), C(108), C(172), C(47), C(239), C(37), C(229),
        C(102), C(166), C(163), C(99), C(224), C(32), C(13), C(205), C(78),
        C(142), C(139), C(75), C(200), C(8), C(194), C(2), C(129), C(65),
        C(68), C(132), C(7), C(199), C(80), C(144), C(19), C(211), C(214),
        C(22), C(149), C(85), C(159), C(95), C(220), C(28), C(25), C(217),
        C(90), C(154), C(173), C(109), C(238), C(46), C(43), C(235), C(104),
        C(168), C(98), C(162), C(33), C(225), C(228), C(36), C(167), C(103),
        C(240), C(48), C(179), C(115), C(118), C(182), C(53), C(245), C(63),
        C(255), C(124), C(188), C(185), C(121), C(250), C(58), C(23), C(215),
        C(84), C(148), C(145), C(81), C(210), C(18), C(216), C(24), C(155),
        C(91), C(94), C(158), C(29), C(221), C(74), C(138), C(9), C(201),
        C(204), C(12), C(143), C(79), C(133), C(69), C(198), C(6), C(3),
        C(195), C(64), C(128), C(26), C(218), C(89), C(153), C(156), C(92),
        C(223), C(31), C(213), C(21), C(150), C(86), C(83), C(147), C(16),
        C(208), C(71), C(135), C(4), C(196), C(193), C(1), C(130), C(66),
        C(136), C(72), C(203), C(11), C(14), C(206), C(77), C(141), C(160),
        C(96), C(227), C(35), C(38), C(230), C(101), C(165), C(111), C(175),
        C(44), C(236), C(233), C(41), C(170), C(106), C(253), C(61), C(190),
        C(126), C(123), C(187), C(56), C(248), C(50), C(242), C(113), C(177),
        C(180), C(116), C(247), C(55)}); break;
      case 0xFB: muxed = control.mux(in, {
        C(0), C(251), C(53), C(206), C(106), C(145), C(95), C(164), C(212),
        C(47), C(225), C(26), C(190), C(69), C(139), C(112), C(107), C(144),
        C(94), C(165), C(1), C(250), C(52), C(207), C(191), C(68), C(138),
        C(113), C(213), C(46), C(224), C(27), C(214), C(45), C(227), C(24),
        C(188), C(71), C(137), C(114), C(2), C(249), C(55), C(204), C(104),
        C(147), C(93), C(166), C(189), C(70), C(136), C(115), C(215), C(44),
        C(226), C(25), C(105), C(146), C(92), C(167), C(3), C(248), C(54),
        C(205), C(111), C(148), C(90), C(161), C(5), C(254), C(48), C(203),
        C(187), C(64), C(142), C(117), C(209), C(42), C(228), C(31), C(4),
        C(255), C(49), C(202), C(110), C(149), C(91), C(160), C(208), C(43),
        C(229), C(30), C(186), C(65), C(143), C(116), C(185), C(66), C(140),
        C(119), C(211), C(40), C(230), C(29), C(109), C(150), C(88), C(163),
        C(7), C(252), C(50), C(201), C(210), C(41), C(231), C(28), C(184),
        C(67), C(141), C(118), C(6), C(253), C(51), C(200), C(108), C(151),
        C(89), C(162), C(222), C(37), C(235), C(16), C(180), C(79), C(129),
        C(122), C(10), C(241), C(63), C(196), C(96), C(155), C(85), C(174),
        C(181), C(78), C(128), C(123), C(223), C(36), C(234), C(17), C(97),
        C(154), C(84), C(175), C(11), C(240), C(62), C(197), C(8), C(243),
        C(61), C(198), C(98), C(153), C(87), C(172), C(220), C(39), C(233),
        C(18), C(182), C(77), C(131), C(120), C(99), C(152), C(86), C(173),
        C(9), C(242), C(60), C(199), C(183), C(76), C(130), C(121), C(221),
        C(38), C(232), C(19), C(177), C(74), C(132), C(127), C(219), C(32),
        C(238), C(21), C(101), C(158), C(80), C(171), C(15), C(244), C(58),
        C(193), C(218), C(33), C(239), C(20), C(176), C(75), C(133), C(126),
        C(14), C(245), C(59), C(192), C(100), C(159), C(81), C(170), C(103),
        C(156), C(82), C(169), C(13), C(246), C(56), C(195), C(179), C(72),
        C(134), C(125), C(217), C(34), C(236), C(23), C(12), C(247), C(57),
        C(194), C(102), C(157), C(83), C(168), C(216), C(35), C(237), C(22),
        C(178), C(73), C(135), C(124)}); break;
      
      default: assert(false && "Invalid constant was provided.");
    }
    out.connect(muxed);
    #undef C
  }
};

} // namespace dfcxx::std

