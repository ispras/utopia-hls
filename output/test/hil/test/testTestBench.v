/*
 * This Verilog testbench was automatically generated by Utopia EDA
 * Generation started: 29-1-2023 8:52:48
 *
 * Ivannikov Institute for System Programming
 * of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://forge.ispras.ru/projects/utopia
 */

`timescale 1ns/10ps

module main_tb;
	// inputs
	reg  clock;
	reg  reset;
	reg [0:0] n1_x;
	reg [0:0] n1_y;

	// outputs
	wire [0:0] n6_z;

	localparam main_latency = 75;

	main DUT(
		.clock(clock),
		.reset(reset),
		.n1_x(n1_x),
		.n1_y(n1_y),
		.n6_z(n6_z));

	initial clock = 0;
	always clock = #(main_latency) ~clock;

	initial begin
		$dumpvars(0, main_tb);

		// reset the device
		@(posedge clock);
		
		reset = 0;
		#(main_latency * 6);
		reset = ~0;
		

		// apply sequence of random stimuli
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		@(posedge clock);
		
		n1_x = 0;
		n1_y = 0;
		
		#(main_latency * 240);

		$finish;
	end
endmodule
