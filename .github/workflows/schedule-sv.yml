name: schedule-sv

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CIRCT_VERSION: 1.72.0
  CIRCT_ARCHIVE: "circt-full-shared-linux-x64.tar.gz"
  DEPENDENCIES_DIR: "deps"
  MLIR_TARGETS_PATH: "lib/cmake/mlir/MLIRTargets.cmake"
  BUILD_DIR: "build"
  UTOPIA_EXECUTABLE: "src/umain"

jobs:
  schedule-system-verilog:
    strategy:
      matrix:
        kernel: [idct, magma]
        cpp   : [STUB]
        config: [STUB]
        test  : [STUB]
        top   : [STUB]
        ## A workaround to initialize empty arrays.
        exclude:
          - cpp   : STUB
          - config: STUB
          - test  : STUB
          - top   : STUB
        include:
          ## IDCT tests.
          - kernel: idct
            cpp   : idct
            config: add_int_1_sub_int_1_mul_int_3_greater_int_3
            test  : 0
            top   : IDCT_test0
          - kernel: idct
            cpp   : idct
            config: add_int_1_sub_int_1_mul_int_3_greater_int_3
            test  : 1
            top   : IDCT_test1
          - kernel: idct
            cpp   : idct
            config: add_int_1_sub_int_1_mul_int_3_greater_int_3
            test  : 2
            top   : IDCT_test2
          - kernel: idct
            cpp   : idct
            config: add_int_1_sub_int_1_mul_int_3_greater_int_3
            test  : 3
            top   : IDCT_test3
          - kernel: idct
            cpp   : idct
            config: add_int_1_sub_int_1_mul_int_3_greater_int_3
            test  : 4
            top   : IDCT_test4
          - kernel: idct
            cpp   : idct
            config: add_int_1_sub_int_1_mul_int_3_greater_int_3
            test  : 5
            top   : IDCT_test5
          ## "Magma" encoder tests.
          - kernel: magma
            cpp   : magma_encoder
            config: add_int_2_xor_int_2
            test  : 0
            top   : MagmaEncoder_test0
          ## "Magma" decoder tests.
          - kernel: magma
            cpp   : magma_decoder
            config: add_int_2_xor_int_2
            test  : 0
            top   : MagmaDecoder_test0
        
    runs-on: ubuntu-20.04
    env:
      MODULE_OUTPUT_PATH : "output.sv"
      LIBRARY_OUTPUT_PATH: "lib.sv"
      TEST_SCRIPT_PATH   : "test_script.sh"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download APT dependencies
        run: |
          sudo apt update
          sudo apt install build-essential clang cmake g++ gcc liblpsolve55-dev lld make ninja-build libctemplate-dev iverilog

      - name: Download and configure CIRCT & LLVM
        env:
          CIRCT_SOURCE: "https://github.com/llvm/circt/releases/download/firtool-${{env.CIRCT_VERSION}}/${{env.CIRCT_ARCHIVE}}"
          CIRCT_DIR: "firtool-${{env.CIRCT_VERSION}}"
        run: |
          mkdir "${{env.DEPENDENCIES_DIR}}"
          cd "${{env.DEPENDENCIES_DIR}}"
          wget "${{env.CIRCT_SOURCE}}"
          tar -xvf "${{env.CIRCT_ARCHIVE}}"
          sed -i 's'/\
          'foreach(_target "LLVMSupport" "LLVMCore" "LLVMMC" "LLVMTarget" "LLVMAsmParser" "LLVMBinaryFormat" '\
          '"LLVMBitReader" "LLVMBitWriter" "LLVMFrontendOpenMP" "LLVMTransformUtils" "LLVMTargetParser" "LLVMIRReader" '\
          '"LLVMipo" "LLVMLinker" "LLVMPasses" "LLVMMCParser" "LLVMLineEditor" "LLVMTableGen" "LLVMCoroutines" "LLVMExecutionEngine" '\
          '"LLVMObject" "LLVMOrcJIT" "LLVMJITLink" "LLVMAnalysis" "LLVMAggressiveInstCombine" "LLVMInstCombine" "LLVMScalarOpts" '\
          '"LLVMVectorize" "LLVMX86CodeGen" "LLVMX86Desc" "LLVMX86Info" "LLVMX86AsmParser" "LLVMX86Disassembler" "CIRCTAffineToLoopSchedule" '\
          '"CIRCTArcToLLVM" "CIRCTCalyxToFSM" "CIRCTCalyxToHW" "CIRCTCalyxNative" "CIRCTCombToArith" "CIRCTCombToLLVM" "CIRCTCombToSMT" '\
          '"CIRCTConvertToArcs" "CIRCTDCToHW" "CIRCTExportChiselInterface" "CIRCTExportVerilog" "CIRCTFIRRTLToHW" "CIRCTFSMToSV" '\
          '"CIRCTHandshakeToDC" "CIRCTHandshakeToHW" "CIRCTHWArithToHW" "CIRCTHWToLLHD" "CIRCTHWToLLVM" "CIRCTHWToBTOR2" "CIRCTHWToSMT" '\
          '"CIRCTHWToSV" "CIRCTHWToSystemC" "CIRCTLLHDToLLVM" "CIRCTLoopScheduleToCalyx" "CIRCTMooreToCore" "CIRCTPipelineToHW" "CIRCTSCFToCalyx" '\
          '"CIRCTSeqToSV" "CIRCTSimToSV" "CIRCTCFToHandshake" "CIRCTVerifToSMT" "CIRCTVerifToSV" "CIRCTExportFIRRTL" "CIRCTComb" '\
          '"CIRCTCombTransforms" "CIRCTDebug" "CIRCTESI" "CIRCTFIRRTL" "CIRCTImportFIRFile" "CIRCTMSFT" "CIRCTMSFTTransforms" "CIRCTHW" '\
          '"CIRCTLLHD" "CIRCTMoore" "CIRCTOM" "CIRCTOMEvaluator" "CIRCTSeq" "CIRCTSeqTransforms" "CIRCTSV" "CIRCTSVTransforms" "CIRCTFSM" '\
          '"CIRCTFSMTransforms" "CIRCTHandshake" "CIRCTHandshakeTransforms" "CIRCTHWArith" "CIRCTVerif" "CIRCTLTL" "CIRCTEmit" "CIRCTFirtool" )'\
          /\
          'foreach(_target "LLVMSupport" "LLVMCore" "LLVMMC" "LLVMTarget" "LLVMAsmParser" "LLVMBinaryFormat" "LLVMBitReader" "LLVMBitWriter" '\
          '"LLVMFrontendOpenMP" "LLVMTransformUtils" "LLVMTargetParser" "LLVMIRReader" "LLVMipo" "LLVMLinker" "LLVMPasses" "LLVMMCParser" '\
          '"LLVMLineEditor" "LLVMTableGen" "LLVMCoroutines" "LLVMExecutionEngine" "LLVMObject" "LLVMOrcJIT" "LLVMJITLink" "LLVMAnalysis" '\
          '"LLVMAggressiveInstCombine" "LLVMInstCombine" "LLVMScalarOpts" "LLVMVectorize" "LLVMX86CodeGen" "LLVMX86Desc" "LLVMX86Info" '\
          '"LLVMX86AsmParser" "LLVMX86Disassembler")/' "${{env.CIRCT_DIR}}/${{env.MLIR_TARGETS_PATH}}"
          cd "${{github.workspace}}"

      - name: Configure Utopia HLS build
        env:
          CIRCT_DIR: "firtool-${{env.CIRCT_VERSION}}"
        run: |
          cmake -S . -B "${{env.BUILD_DIR}}" -G Ninja -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_PREFIX_PATH="${{github.workspace}}/${{env.DEPENDENCIES_DIR}}/${{env.CIRCT_DIR}}" \
          -DSRC_FILES="${{github.workspace}}/examples/${{matrix.kernel}}/${{matrix.cpp}}.cpp"

      - name: Build Utopia HLS
        run: |
          cmake --build "${{env.BUILD_DIR}}"

      - name: Run SystemVerilog modules generation
        run: |
          "${{env.BUILD_DIR}}/${{env.UTOPIA_EXECUTABLE}}" hls --config \
          "${{github.workspace}}/examples/${{matrix.kernel}}/${{matrix.config}}.json" \
          -a --out-sv "${{env.MODULE_OUTPUT_PATH}}" --out-sv-lib "${{env.LIBRARY_OUTPUT_PATH}}"

      - name: Run Icarus Verilog
        run: |
          iverilog -g2005-sv -s "${{matrix.top}}" "${{env.MODULE_OUTPUT_PATH}}" "${{env.LIBRARY_OUTPUT_PATH}}" "${{matrix.cpp}}_testbench${{matrix.test}}"

      - name: Create test script
        run: |
          echo "exit \$(./a.out | grep "BAD"  | wc -l)" > test_script.sh

      - name: Run test script
        run: |
          bash "${{env.TEST_SCRIPT_PATH}}"
          
